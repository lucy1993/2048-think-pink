[{"/Users/garlucynations/Desktop/newG/2048-think-pink/src/index.js":"1","/Users/garlucynations/Desktop/newG/2048-think-pink/src/reportWebVitals.js":"2","/Users/garlucynations/Desktop/newG/2048-think-pink/src/App.js":"3"},{"size":500,"mtime":1611067385991,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1611067385991,"results":"6","hashOfConfig":"5"},{"size":6147,"mtime":1611070878350,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"14xfx46",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/garlucynations/Desktop/newG/2048-think-pink/src/index.js",[],["16","17"],"/Users/garlucynations/Desktop/newG/2048-think-pink/src/reportWebVitals.js",[],"/Users/garlucynations/Desktop/newG/2048-think-pink/src/App.js",["18","19"],"import React, { useState, useEffect, useRef } from 'react';\nimport ArrowKeysReact from 'arrow-keys-react';\nimport './App.css';\n\nconst classedNumb = {\n  2: 'two',\n  4: 'four',\n  8: 'eight',\n  16: 'sixteen',\n  32: 'thirty-two',\n  64: 'sixty-four',\n  128: 'h-t-e',\n  256: 't-f-s',\n  512: 'f-o-t',\n  1024: 'o-z-t-f',\n  2048: 't-z-f-e'\n}\n\nfunction App() {\n  const initPageRef = useRef();\n  const [keyState, setKeyState] = useState(null);\n  const [gameState, setGameState] = useState(null);\n  const [scoreState, setScoreState] = useState(0);\n\n  const [data, setData] = useState([\n    [0,0,0,0], \n    [0,0,0,0], \n    [0,0,0,0], \n    [0,0,0,2]\n  ]);\n\n  const handleNewGame = () => {\n    setGameState('new')\n    setScoreState(0)\n    setData([\n      [0,0,0,0], \n      [2,0,0,0], \n      [0,0,0,0], \n      [0,0,0,2]\n    ])\n  }\n\n  useEffect(() => {\n    initKeys();\n    initPageRef.current.focus();\n  });\n\n  useEffect(() => {\n    setData(addRandomNumber())\n  }, [keyState]);\n\n  const addRandomNumber = () => {\n    const changeCurrentData = [...data];\n    if (gameState !== 'lost') {\n      const randomParent = Math.floor(Math.random() * 4)\n      const randomChild = Math.floor(Math.random() * 4)\n      const twoOrFour = Math.floor(Math.random() * 6) + 1  < 4 ? 2 : 4\n  \n  \n      if(changeCurrentData[randomParent][randomChild]) {\n        return addRandomNumber()\n      } else {\n         changeCurrentData[randomParent][randomChild] = twoOrFour;\n      }\n    }\n    return changeCurrentData\n  }\n\n  const initKeys = () => {\n    ArrowKeysReact.config({\n      left: () => {\n        handleArrows('left')\n      },\n      right: () => {\n        handleArrows('right')\n      },\n      up: () => {\n        handleArrows('up')\n      },\n      down: () => {\n        handleArrows('down')\n      }\n    });\n  }\n\n  const handleSum = (modData, side) => {\n    let newData = []\n    modData.forEach(row => {\n      let newRow = []\n      row.map((col, colIndex) => {\n        let innerRow = row\n        if(col) {\n          if(col === innerRow[colIndex+1]) {\n            innerRow[colIndex+1] = 0\n            newRow.push(col+col)\n            setScoreState(scoreState + col + col)\n          } else newRow.push(col)\n        }\n        return innerRow\n      })\n      if(side === 'right') {\n        newData.push(new Array(4-newRow.length).fill(0).concat(newRow))\n      } else newData.push(newRow.concat(new Array(4-newRow.length).fill(0)))\n    })\n    return newData\n  }\n\n  const handleOrderArray = (modData, side) => {\n\n    let newData = []\n    let noM = 0\n    modData.forEach(row => {\n      let newRow = []\n      row.forEach(col => {\n        if(col) newRow.push(col)\n      })\n      if(newRow.length === 4) noM++\n      if(side === 'right') {\n        newData.push(new Array(4-newRow.length).fill(0).concat(newRow))\n      } else newData.push(newRow.concat(new Array(4-newRow.length).fill(0)))\n     \n    })\n\n    const sumData = handleSum(newData, side)\n    if(noM !== 4) {\n      return sumData\n    } else {\n      if(!handleCheckSteps(data)) {\n        setGameState('lost');\n      }\n      return sumData\n    }\n  }\n\n  const handleCheckSteps = (modData) => {\n    let noStep = false\n    modData.forEach(row => {\n      row.map((col, colIndex) => {\n        let innerRow = row\n        if(col) {\n          if(col === innerRow[colIndex+1]) {\n            noStep = true\n          } \n        }\n      })\n    })\n    return noStep\n  }\n\n  const handleReverseArray = (modData) => {\n    let newData = []\n    data.forEach((row, rowIndex) => {\n      let newRow = []\n      row.forEach((col, cilIndex) => {\n        newRow.push(modData[cilIndex][rowIndex]);\n      })\n      newData.push(newRow)\n    })\n\n    return newData\n  }\n\n  const handleArrows = (eventSide) => {\n    let mainData = null\n    if(eventSide === 'left') {\n      mainData = handleOrderArray(data, eventSide)\n    }\n\n    if(eventSide === 'right') {\n      mainData = handleOrderArray(data, eventSide)\n    }\n\n    if(eventSide === 'up') {\n      let newOrder = handleReverseArray(data)\n      let changedOrder = handleOrderArray(newOrder, eventSide)\n      mainData = handleReverseArray(changedOrder)\n    }\n\n    if(eventSide === 'down') {\n      let newOrder = handleReverseArray(data)\n      let changedOrder = handleOrderArray(newOrder, 'right')\n      mainData = handleReverseArray(changedOrder)\n    }\n\n    if(mainData) setData(mainData)\n    setKeyState(eventSide)\n  }\n\n  return (\n    <div \n      className=\"App\"\n      ref={initPageRef}\n      {...ArrowKeysReact.events} tabIndex=\"1\"\n    >\n      <div className='big-box'>\n        <div className='box-header'>\n          <div \n            className='new-game-btn'\n            onClick={handleNewGame}\n          > new game </div>\n          <div className='new-score-btn'> score: {scoreState} </div>\n        </div>\n        <div className='small-box'>\n          {gameState === 'lost' ? <div className='pop-up-message'>\n            <h1 className='message-text'> game over! </h1>\n            <div \n              className='new-game-btn'\n              onClick={handleNewGame}\n            > try again </div>\n          </div> : null}\n          {\n            data && data.length ? data.map((row, indexRow) => {\n              let classAnm = 'swipeAnimation';\n              setTimeout(() => classAnm = ' ', 0);\n              let rowAnimDir = indexRow;\n              if(keyState === 'up') {\n                rowAnimDir = 4-indexRow\n              }\n              return <div\n              className={`row`} > {\n              row.map((col, indexCol) => {\n                if(keyState === 'right') {\n                  rowAnimDir = indexCol\n                } else if(keyState === 'left') {\n                  rowAnimDir = 4 - indexCol\n                }\n                return <div \n                style={{ animationDelay: `0.${rowAnimDir-1}s` }}\n                key={Math.random()}\n                className={`${col ? null : classAnm} box ${col ? classedNumb[col] : ''}`}> {col || null} \n              </div>\n              })\n            } </div>\n            })\n          : null\n          }\n        </div>\n        <div className='intro-text'> please use your arrow keys to navigate </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":50,"column":6,"nodeType":"26","endLine":50,"endColumn":16,"suggestions":"27"},{"ruleId":"28","severity":1,"message":"29","line":138,"column":31,"nodeType":"30","messageId":"31","endLine":138,"endColumn":33},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'addRandomNumber'. Either include it or remove the dependency array.","ArrayExpression",["34"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"35","fix":"36"},"Update the dependencies array to be: [addRandomNumber, keyState]",{"range":"37","text":"38"},[948,958],"[addRandomNumber, keyState]"]